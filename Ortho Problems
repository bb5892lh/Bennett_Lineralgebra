{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOCkHJOOMkaXz233c3nJWa3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bb5892lh/Bennett_Lineralgebra/blob/main/Ortho%20Problems\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "4hyvBD2J1PBf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sympy import Poly\n",
        "import sympy as sym\n",
        "import numpy as np\n",
        "from numpy import c_\n",
        "\n",
        "# We'll specify that x and t are variables:\n",
        "x, t = sym.symbols('x, t')\n",
        "\n",
        "ll = \"loaded\""
      ],
      "metadata": {
        "id": "Ft2S6_Hj2Bqa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "yy = np.array([ 1, 2, 3, 4])\n",
        "yy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V23G4SWi3i2O",
        "outputId": "86476aa0-3f1e-4dfb-c6c1-885411d9bd2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yy.dot(yy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cUSX0l1r4JDI",
        "outputId": "6f728ab7-b5cb-4bde-ba2e-2a687b13157f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.sqrt((9))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10Bv2nnH4jfC",
        "outputId": "591f2a0d-21fc-4ce7-d181-82c92f195b9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gram Schmidt Process:\n",
        "\n",
        "1. Start with \"random\" vectors r1, r2, r3, and r4.\n",
        "2. Process them in order, generating: u1, u2, u3, and u4.\n",
        "\n",
        "After each step, we'll check that our nice vectors are:\n",
        "\n"
      ],
      "metadata": {
        "id": "xGfNE6GZ5BK5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# These are the \"random vectors\":\n",
        "\n",
        "r1 = np.array( [ 3, 0, 3, 0])\n",
        "print(\"r1 is \", r1)\n",
        "\n",
        "r2 = np.array( [ 3, 2, 3, 3])\n",
        "print(\"r2 is \", r2)\n",
        "\n",
        "r3 = np.array( [ -7, -4, -5, -6])\n",
        "print(\"r3 is \", r3)\n",
        "\n",
        "r4 = np.array( [ -7, -3, -11, 2])\n",
        "print(\"r4 is \", r4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3IkWx5AH5tUc",
        "outputId": "36448c4d-1df9-453a-8c77-48edc954f13c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r1 is  [3 0 3 0]\n",
            "r2 is  [3 2 3 3]\n",
            "r3 is  [-7 -4 -5 -6]\n",
            "r4 is  [ -7  -3 -11   2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Process r1:\n",
        "t1 = r1\n",
        "print(\"t1 = \", t1)\n",
        "\n",
        "#magnitude\n",
        "n1 = np.sqrt(t1.dot(t1))\n",
        "print (\"the size of t1 is \", n1)\n",
        "\n",
        "#create u1:\n",
        "u1 = (1/n1)*t1\n",
        "print(\"u1 is \", u1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EZecghHK8XSI",
        "outputId": "7a1a0034-246b-4752-b0ff-c85620fda6e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "t1 =  [3 0 3 0]\n",
            "the size of t1 is  4.242640687119285\n",
            "u1 is  [0.70710678 0.         0.70710678 0.        ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"the magnitude of u1 is \", np.sqrt(u1.dot(u1)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "srcQPr3TiEbS",
        "outputId": "eaf1f268-a05f-499d-ca9d-1c122df1c688"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the magnitude of u1 is  1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Process r2:\n",
        "print(\"r2 is \", r2)\n",
        "t2 = r2 -  ( r2.dot(u1)   ) *u1\n",
        "print(\"t2 = \", t2)\n",
        "\n",
        "#magnitude\n",
        "n2 = np.sqrt(t2.dot(t2))\n",
        "print (\"the size of t2 is \", n2)\n",
        "\n",
        "#create u2:\n",
        "u2 = (1/n2)*t2\n",
        "print(\"u2 is \", u2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pG8nXM3_iVm2",
        "outputId": "997dba1e-b6e7-41eb-b58f-c7ceaaac1dd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2 is  [3 2 3 3]\n",
            "t2 =  [-4.4408921e-16  2.0000000e+00 -4.4408921e-16  3.0000000e+00]\n",
            "the size of t2 is  3.605551275463989\n",
            "u2 is  [-1.23168186e-16  5.54700196e-01 -1.23168186e-16  8.32050294e-01]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"the magnitude of u2 is \", np.sqrt(u2.dot(u2)))\n",
        "print(\"the dotproduct of u2 and u1 is \", u1.dot(u2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tljWddtxiuPG",
        "outputId": "f90efc29-130b-4dd8-d686-040c1246c6c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the magnitude of u2 is  1.0\n",
            "the dotproduct of u2 and u1 is  -1.741861189847285e-16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Process r3:\n",
        "print(\"r3 is \", r3)\n",
        "t3 = r3 -  ( r3.dot(u1)   ) *u1 - ( r3.dot(u2)   ) *u2\n",
        "print(\"t3 = \", t3)\n",
        "\n",
        "#magnitude\n",
        "n3 = np.sqrt(t3.dot(t3))\n",
        "print (\"the size of t3 is \", n3)\n",
        "\n",
        "#create u3:\n",
        "u3 = (1/n3)*t3\n",
        "print(\"u3 is \", u3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thjVOO3AkW1I",
        "outputId": "d8d12aa1-ba56-47da-8582-90d2f0443ed5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r3 is  [-7 -4 -5 -6]\n",
            "t3 =  [ 6.00000000e+00 -1.33226763e-15  6.00000000e+00 -1.77635684e-15]\n",
            "the size of t3 is  8.48528137423857\n",
            "u3 is  [ 7.07106781e-01 -1.57009246e-16  7.07106781e-01 -2.09345661e-16]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"the magnitude of u3 is \", np.sqrt(u3.dot(u3)))\n",
        "print(\"the dotproduct of u3 and u1 is \", u1.dot(u3))\n",
        "print(\"the dotproduct of u3 and u2 is \", u2.dot(u3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x5cfysnEFony",
        "outputId": "06157a9b-4c8d-4709-dcef-5921e2522418"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the magnitude of u3 is  1.0\n",
            "the dotproduct of u3 and u1 is  1.0\n",
            "the dotproduct of u3 and u2 is  -0.7559289460184543\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Process r4:\n",
        "print(\"r4 is \", r4)\n",
        "t4 = r4 -  ( r4.dot(u1)   ) *u1 - ( r4.dot(u2)   ) *u2 - ( r4.dot(u3)   ) *u3\n",
        "print(\"t4 = \", t4)\n",
        "\n",
        "#magnitude\n",
        "n4 = np.sqrt(t4.dot(t4))\n",
        "print (\"the size of t4 is \", n4)\n",
        "\n",
        "#create u4:\n",
        "u4 = (1/n4)*t4\n",
        "print(\"u4 is \", u4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r-lroelnQkfB",
        "outputId": "db1a84f5-abf4-47e1-de18-50022476def1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r4 is  [ -7  -3 -11   2]\n",
            "t4 =  [16.77777778  0.3015873  11.12698413  6.95238095]\n",
            "the size of t4 is  21.300942672336326\n",
            "u4 is  [0.78765424 0.0141584  0.5223705  0.32638842]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"the magnitude of u4 is \", np.sqrt(u4.dot(u4)))\n",
        "print(\"the dotproduct of u4 and u1 is \", u1.dot(u4))\n",
        "print(\"the dotproduct of u4 and u2 is \", u2.dot(u4))\n",
        "print(\"the dotproduct of u4 and u3 is \", u3.dot(u4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CA85IJV3Rq89",
        "outputId": "b8f487dc-dd17-4430-d332-ab864bfeaa7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the magnitude of u4 is  1.0\n",
            "the dotproduct of u4 and u1 is  0.9263273777962325\n",
            "the dotproduct of u4 and u2 is  -0.9033783017821699\n",
            "the dotproduct of u4 and u3 is  0.9263273777962323\n"
          ]
        }
      ]
    }
  ]
}